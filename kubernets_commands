//Build user information for martin in the default kubeconfig file: User = martin , client-key = /root/martin.key and client-certificate = /root/martin.crt

kubectl config set-credentials martin --client-certificate=/root/martin.crt --client-key=/root/martin.key 

//Create a new context called 'developer' in the default kubeconfig file with 'user = martin' and 'cluster = kubernetes'
kubectl config set-context developer --user martin --cluster =kubernetes

//'developer-role', should have all(*) permissions for services in development namespace

//'developer-role', should have all permissions(*) for persistentvolumeclaims in development namespace

//'developer-role', should have all(*) permissions for pods in development namespace

kubectl create role developer-role --verb="*" --resource=svc,pvc,pods -n development

//create rolebinding = developer-rolebinding, role= 'developer-role', namespace = development

//rolebinding = developer-rolebinding associated with user = 'martin'
k create rolebinding developer-rolebinding --role=developer-role --user=martin -n development

//set context 'developer' with user = 'martin' and cluster = 'kubernetes' as the current context.

//Storage Request: 1Gi

//Access modes: ReadWriteMany

//pvc name = jekyll-site, namespace = development

//'jekyll-site' PVC should be bound to the PersistentVolume called 'jekyll-site'.

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jekyll-site
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: local-storage
  resources:
    requests:
      storage: 1Gi
      
      

//pod: 'jekyll' has an initContainer, name: 'copy-jekyll-site', image: 'kodekloud/jekyll'

//initContainer: 'copy-jekyll-site', command: [ "jekyll", "new", "/site" ] (command to run: jekyll new /site)

//pod: 'jekyll', initContainer: 'copy-jekyll-site', mountPath = '/site'

//pod: 'jekyll', initContainer: 'copy-jekyll-site', volume name = 'site'

//pod: 'jekyll', container: 'jekyll', volume name = 'site'

//pod: 'jekyll', container: 'jekyll', mountPath = '/site'

//pod: 'jekyll', container: 'jekyll', image = 'kodekloud/jekyll-serve'

//pod: 'jekyll', uses volume called 'site' with pvc = 'jekyll-site'

//pod: 'jekyll' uses label 'run=jekyll'


apiVersion: v1
kind: Pod
metadata:
  namespace: development
  creationTimestamp: null
  labels:
    run: jekyll
  name: jekyll
spec:
  containers:
  - image: kodekloud/jekyll-serve
    name: jekyll
    volumeMounts:
    - mountPath: /site
      name: site
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  volumes:
    - name: site
      persistentVolumeClaim:
        claimName: jekyll-site

  initContainers:
  - name: copy-jekyll-site
    image: kodekloud/jekyll
    command: ['jekyll', 'new', "/site"]
    volumeMounts:
    - mountPath: /site
      name: site

//Service 'jekyll' uses targetPort: '4000', namespace: 'development'

//Service 'jekyll' uses Port: '8080', namespace: 'development'

//Service 'jekyll' uses NodePort: '30097', namespace: 'development'

k expose pod jekyll --port=8080 --target-port=4000 --name=jekyll --type=NodePort -n development
